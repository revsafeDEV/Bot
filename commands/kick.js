const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('kick')
        .setDescription('Wyrzuca u≈ºytkownika z serwera')
        .addUserOption(option =>
            option.setName('u≈ºytkownik')
                .setDescription('U≈ºytkownik do wyrzucenia')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('pow√≥d')
                .setDescription('Pow√≥d wyrzucenia')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.KickMembers),
    
    cooldown: 5,
    
    async execute(interaction) {
        const target = interaction.options.getUser('u≈ºytkownik');
        const reason = interaction.options.getString('pow√≥d') || 'Nie podano powodu';
        const member = interaction.guild.members.cache.get(target.id);

        // Sprawdzenie czy u≈ºytkownik istnieje na serwerze
        if (!member) {
            return interaction.reply({
                content: '‚ùå U≈ºytkownik nie zosta≈Ç znaleziony na tym serwerze!',
                ephemeral: true
            });
        }

        // Sprawdzenie czy bot mo≈ºe wyrzuciƒá tego u≈ºytkownika
        if (!member.kickable) {
            return interaction.reply({
                content: '‚ùå Nie mogƒô wyrzuciƒá tego u≈ºytkownika! (Sprawd≈∫ hierarchiƒô r√≥l)',
                ephemeral: true
            });
        }

        // Sprawdzenie czy u≈ºytkownik pr√≥buje wyrzuciƒá samego siebie
        if (target.id === interaction.user.id) {
            return interaction.reply({
                content: '‚ùå Nie mo≈ºesz wyrzuciƒá samego siebie!',
                ephemeral: true
            });
        }

        // Sprawdzenie hierarchii r√≥l
        if (member.roles.highest.position >= interaction.member.roles.highest.position) {
            return interaction.reply({
                content: '‚ùå Nie mo≈ºesz wyrzuciƒá u≈ºytkownika o r√≥wnej lub wy≈ºszej roli!',
                ephemeral: true
            });
        }

        try {
            // Pr√≥ba wys≈Çania prywatnej wiadomo≈õci do u≈ºytkownika
            try {
                const dmEmbed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('ü¶∂ Zosta≈Çe≈õ wyrzucony!')
                    .addFields(
                        { name: 'Serwer', value: interaction.guild.name, inline: true },
                        { name: 'Wyrzucony przez', value: interaction.user.tag, inline: true },
                        { name: 'Pow√≥d', value: reason }
                    )
                    .setTimestamp();

                await target.send({ embeds: [dmEmbed] });
            } catch (error) {
                console.log(`Nie mo≈ºna wys≈Çaƒá DM do ${target.tag}`);
            }

            // Wyrzucenie u≈ºytkownika
            await member.kick(reason);

            // Embed z potwierdzeniem
            const embed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚úÖ U≈ºytkownik zosta≈Ç wyrzucony')
                .addFields(
                    { name: 'U≈ºytkownik', value: `${target.tag} (${target.id})`, inline: true },
                    { name: 'Moderator', value: interaction.user.tag, inline: true },
                    { name: 'Pow√≥d', value: reason }
                )
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });

            console.log(`${interaction.user.tag} wyrzuci≈Ç ${target.tag} z powodu: ${reason}`);

        } catch (error) {
            console.error('B≈ÇƒÖd podczas wyrzucania:', error);
            await interaction.reply({
                content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas wyrzucania u≈ºytkownika!',
                ephemeral: true
            });
        }
    },
};
